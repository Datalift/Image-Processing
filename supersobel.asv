function angles = supersobel(nombre, threshold)
% SUPPERSOBEL Gets an input image and detects the borders by
% means of sobel.

%   The function gets an image and the border detection threshold as the parameters
%   and shows the result for horizontal and vertical sovel and an image of the combination
%   of the original image overlayed with the edges detected shown in green colour,
%   Then returns a matrix with a value of angle of the derivative for each pixel.
    nombre = im2double(nombre);
    subplot(2,2,1);imshow(nombre);title('Imagen original');
    
    %Horizontal sobel calculation
    mask = fspecial('sobel');
    horsob = conv2(mask, nombre);
    horsob = horsob(2:(end-1),3:end);
    horsob = horsob - threshold;
    subplot(2,2,2);imshow(horsob);title('Imagen Sobel horizontal');
    
    %Vertical sobel calculation
    mask = mask';
    versob = conv2(mask,nombre);
    versob = versob(3:end,2:(end-1));
    versob = versob - threshold;
    subplot(2,2,3);imshow(versob);title('Imagen Sobel vertical');
    
    %test
    sobel = imadd(versob,horsob);
    
    % normalizamos la imagen de modulo
    aux = 255 * sobel ./ max( max( sobel ) );
    % Selecionamos lo que queremos colorear
    mask = (aux > 50);
    % Tres imágenes identicas a la de nivel de gris
    im_modulo_r = nombre;
    im_modulo_g = nombre;
    im_modulo_b = nombre;
    % En los píxeles marcados (mask) se pone RGB = [0 255 0]
    im_modulo_r(mask) = 0;
    im_modulo_g(mask) = 255;
    im_modulo_b(mask) = 0;
    % Se crean las bandas
%     im_modulo_rgb(:,:,1) = im_modulo_r;
%     im_modulo_rgb(:,:,2) = im_modulo_g;
%     im_modulo_rgb(:,:,3) = im_modulo_b;
    im_modulo_rgb = cat(3,im_modulo_r,im_modulo_g)

    subplot(2,2,4); imshow(im_modulo_rgb); title('sobel');
    
end

